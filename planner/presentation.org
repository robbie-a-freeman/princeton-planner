#+STARTUP: inlineimages

* What will you get out of this presentation?
- Goal: to learn the key parts of a web app and how they interact
- CRUD application: Create, read, update, delete.
  - Surprisingly powerful!
  - Possibly one of the most powerful uses of coding knowledge
- The MVC/3-part framework of an application
  - Routes (what should happen when we go to a page?)
  - Views (what html should we show when we go to page?)
  - Models/Database (what stuff are we dealing with?)
  - We'll cover all of these + a brief intro into forms
- To follow along, go to https://github.com/leilavc/mxchange
* Who am I?
- Leila Clark '18, AB COS
- Interned at Jane Street, starting fulltime in the fall
- Writing flask apps for a while, currently using it for my thesis.
  - Caveat: I don't claim to have 100% perfect use of flask,
    especially because I haven't used it (or python) in industry.
* What is Flask?
- Two major python frameworks: Flask and Django.
- Django is 'batteries included.' Flask is more minimalist.
  - Like driving an automatic vs. manual? (I don't drive.) You
    probably always want to use one, but you really understand how
    cars work from driving a manual.
* Dependencies

- Install flask-cas

- Set up virtualenv

#+BEGIN_SRC shell
python3 -m venv .env
source .env/bin/activate
pip install flask
#+END_SRC

* Creating our first website

- Write 4 lines:

app.py
#+BEGIN_SRC python
  from flask import Flask

  if __name__ == "__main__":
      app = Flask(__name__)
      app.run(debug=True)
#+END_SRC

- One shell command:

#+BEGIN_SRC shell
python app.py
#+END_SRC

- Navigate to http://localhost:5000/
- You're done!

* Adding some content
- We probably want to have a main page
- Create a new folder and file:

mxchange/routes.py
#+BEGIN_SRC python
  from . import app

  @app.route('/')
  def main():
      return "This is my website"
#+END_SRC

mxchange/__init__.py
#+BEGIN_SRC python
from flask import Flask

app = Flask(__name__)

from . import routes
#+END_SRC

app.py
#+BEGIN_SRC python
  from mxchange import app

  if __name__ == "__main__":
      app.run(debug=True)
#+END_SRC

- Try it out

* Designing our app
- Here we need to think about next steps.
- What do we want to keep track of?
  - Meal exchanges
  - Requires us to also keep track of clubs & users
- Some webpages that we might want
  - 'All my open meal exchanges'
  - 'Create a new meal exchange'
  - 'Look at this meal exchange'
- We've now identified a few moving parts to our website.
- This means that we need to create
  1. models.py: a database to keep track of what's going on + 'tables'
     in that database
  2. routes.py: webpages
  3. templates/*.html: templates for our front-end web pages
  4. some sort of user authentication scheme.
- Note: This is a bit overkill for our specific use case, but the aim
  is to demonstrate the tools you'd need to use to develop a real website.
* Step 1: Add user authentication
** Let's use CAS!
#+BEGIN_SRC shell
pip install flask_cas
#+END_SRC
** First, generate a secret key:
#+BEGIN_SRC python
import os
os.urandom(24)
#+END_SRC
Mine is
'\xe6\xde\xa5\xccUb\xc3\nv\xf7\x89\xc4\xec\x98\xe1\x14\xf1\x06\xcam\xa27t\x9b'

** Second, update configuration
mxchange/__init__.py
#+BEGIN_SRC python
from flask import Flask
from flask_cas import CAS


app = Flask(__name__)
app.config['CAS_SERVER'] = 'https://fed.princeton.edu'
app.config['CAS_AFTER_LOGIN'] = 'main'
cas = CAS(app)

app.secret_key = '\xe6\xde\xa5\xccUb\xc3\nv\xf7\x89\xc4\xec\x98\xe1\x14\xf1\x06\xcam\xa27t\x9b'

from . import routes
#+END_SRC

** Third, require login to the main page
#+BEGIN_SRC python
from . import app
from flask_cas import login_required


@app.route("/")
@login_required
def main():
    return "This is my website"
#+END_SRC

** Fourth: Whoops. Patch flask_cas
- Go to .env/lib/python3.6/site-packages/flask_cas/routing.py
- Change line 125 from

#+BEGIN_SRC python
attributes = xml_from_dict["cas:attribute"]
#+END_SRC

to

#+BEGIN_SRC python
attributes = xml_from_dict.get("cas:attrbute", {})
#+END_SRC

- This is a bug... see https://github.com/cameronbwhite/Flask-CAS/issues/31

(and there's probably a better way to fix this but this will work for now)

** Testing
- Now go to http://localhost:5000 again
- To logout, go to http://localhost:5000/logout
- Yay!

* Step 2: Add some database tables
** Set up database
Make sure you have flask_sqlalchemy installed.

#+BEGIN_SRC shell
pip install flask_sqlalchemy
#+END_SRC

Update the app configuration.

mxchange/__init__.py
#+BEGIN_SRC python
from flask import Flask
from flask_cas import CAS
from flask_sqlalchemy import SQLAlchemy


DATABASE = '/tmp/mxchange.db'

app = Flask(__name__)
app.config['CAS_SERVER'] = 'https://fed.princeton.edu'
app.config['CAS_AFTER_LOGIN'] = 'main'
db = SQlAlchemy(app)
cas = CAS(app)

app.secret_key = '\xe6\xde\xa5\xccUb\xc3\nv\xf7\x89\xc4\xec\x98\xe1\x14\xf1\x06\xcam\xa27t\x9b'

from . import routes
#+END_SRC

** Create SQLAlchemy models
*** What do we want?
- User:
  - id (int)
  - username (str)
  - club (Club)
  - meal_exchanges (MealExchange)
- Club:
  - id (int)
  - name (str)
- MealExchange:
  - id (int)
  - start_host (User)
  - start_guest (User)
  - start_date (DateTime)
  - end_date (DateTime)
  - meal (string)

*** Make all the simple models
#+BEGIN_SRC python
from . import db
from datetime import datetime


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True,
                         unique=True)

    def __repr__(self) -> str:
        return '<User {}>'.format(self.username)


class Club(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64), index=True,
                     unique=True)

    def __repr__(self) -> str:
        return '<Club {}>'.format(self.name)


class MealExchange(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    start_date = db.Column(db.DateTime, index=True,
                           unique=True, default=datetime.utcnow())
    end_date = db.Column(db.DateTime, index=True,
                         unique=True, default=datetime.utcnow())

    def __repr__(self) -> str:
        return '<MealExchange {}>'.format(self.id)
#+END_SRC
*** Add relationships
- Quick rundown of database relational types:
  - One-to-one
  - ForeignKey: Many-to-one
    - A student (usually) belongs to one club. A club has many students.
  - Relationship: Many-to-many
    - A book can have multiple categories. A category has multiple
      books associated with it.
- We only need to worry about many-to-one relationships here.

#+BEGIN_SRC python
from . import db
from datetime import datetime


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True,
                         unique=True)
    club_id = db.Column(db.Integer, db.ForeignKey('club.id'),
                        nullable=False)
    club = db.relationship('Club')

    def __repr__(self) -> str:
        return '<User {}>'.format(self.username)


class Club(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64), index=True,
                     unique=True)

    def __repr__(self) -> str:
        return '<Club {}>'.format(self.name)


class MealExchange(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    start_date = db.Column(db.DateTime, index=True,
                           unique=True, default=datetime.utcnow())
    end_date = db.Column(db.DateTime, index=True,
                         unique=True)
    start_host_id = db.Column(db.Integer, db.ForeignKey('user.id'),
                              nullable=False)
    start_host = db.relationship('User', foreign_keys=[start_host_id])
    start_guest_id = db.Column(db.Integer, db.ForeignKey('user.id'),
                               nullable=False)
    start_guest = db.relationship('User', foreign_keys=[start_guest_id])
    meal = db.Column(db.String(64), index=True, unique=True)

    def __repr__(self):
        return '<MealExchange {} between {} and {}>'.format(
            self.id, self.start_host.username, self.end_host.username)
#+END_SRC

*** Initialize our database
Run in the parent folder of mxchange:

#+BEGIN_SRC python
from mxchange import db, models

db.create_all()
db.session.commit()
charter = models.Club(name='Charter')
cloister = models.Club(name='Cloister')
colonial = models.Club(name='Colonial')
terrace = models.Club(name='Terrace')
quad = models.Club(name='Quad')
db.session.add(charter)
db.session.add(cloister)
db.session.add(colonial)
db.session.add(terrace)
db.session.add(quad)
db.session.commit()
clubs = models.Club.query.all()
print(clubs)
leilac = models.User(username="leilac", club=terrace)
me = models.User(username="mynetid", club=quad)
db.session.add(leilac)
db.session.add(me)
db.session.commit()
#+END_SRC

Now you have all your things!
* Step 3: Views, or: now we write HTML
Now we've gotten most of our backend together and we need to decide:
what do we want to do with this?!

Earlier we listed things we might want:
  - 'All my open meal exchanges'
  - 'Create a new meal exchange'
  - 'Look at this meal exchange'

** First let's do 'create a new meal exchange'
*** We need to make a form.

For this we'll use WTF-forms

#+BEGIN_SRC shell
pip install flask_wtf
#+END_SRC

Create a file forms.py:

mxchange/forms.py
#+BEGIN_SRC python
from flask_wtf import FlaskForm
from wtforms import TextField, DateField, SelectField
from wtforms.validators import DataRequired


class StartMealExchangeForm(FlaskForm):
    guest = TextField('guest', validators=[DataRequired()])
    date = DateField(validators=[DataRequired()])
    meal = SelectField(u'Meal', choices=[(
        'breakfast', 'Breakfast'), ('lunch', 'Lunch'), ('dinner', 'Dinner')])


class EndMealExchangeForm(FlaskForm):
    # We don't need this right now but we might want it later.
    date = DateField(validators=[DataRequired()])
#+END_SRC

*** We need to write a template
mxchange/templates/start.html
#+BEGIN_SRC html
<html>
  <body>
    <h3>Start a meal exchange</h3>
    <form method="post" action="/start">
      {{ form.csrf_token }}
      {{ form.guest.label }} {{ form.guest(size=20) }}<br>
      {{ form.date.label }} {{ form.date(size=20) }}<br>
      {{ form.meal.label }} {{ form.meal() }}<br>
      <input type="submit" value="Go">
    </form>
  </body>
</html>
#+END_SRC
*** We need to make flask put these all together through routes

mxchange/routes.py
#+BEGIN_SRC python
from . import app
from flask import render_template, redirect
from flask_cas import login_required
from .forms import StartMealExchangeForm


@app.route("/")
@login_required
def main():
    return "This is my website"


@app.route('/start', methods=('GET', 'POST'))
def start():
    form = StartMealExchangeForm()
    if form.validate_on_submit():
        # We will want to actually do something here later
        return redirect('/')
    return render_template('start.html', form=form)
#+END_SRC

*** Now let's actually do something with the data we get!

mxchange/routes.py
#+BEGIN_SRC python
from . import app, db, cas
from flask import render_template, redirect
from flask_cas import login_required
from .forms import StartMealExchangeForm
from .models import User, MealExchange


@app.route("/")
@login_required
def main():
    return "This is my website"


@app.route('/start', methods=('GET', 'POST'))
@login_required
def start():
    form = StartMealExchangeForm()
    if form.validate_on_submit():
        guest = User.query.filter_by(username=form.guest.data).first()
        host = User.query.filter_by(username=cas.username).first()
        # We will want to actually do something here later
        if guest is not None and host is not None:
            mxchange = MealExchange(
                start_date=form.date.data, start_host=host,
                start_guest=guest, meal=form.meal.data)
            db.session.add(mxchange)
            db.session.commit()
            return redirect('/')
    return render_template('start.html', form=form)
#+END_SRC
** Now let's write 'show all my open meal exchanges' first.
*** Similarly, we need to write a template and then get flask to show it
mxchange/template/index.html
#+BEGIN_SRC html
<html>
  <body>
    <p><a href="/start"> Start a new meal exchange </a></p>
    <h3>Exchanges I need to finish at my club</h3>
    <ul>
      {% for mxchange in guested_mxchanges %}
      <li><a href="/mxchange/{{ mxchange.id }}">With: {{ mxchange.start_host.username }} - Started: {{ mxchange.start_date }}<a></li>
      {% endfor %}
    </ul>
    <h3>Exchanges I need to finish at another club</h3>
    <ul>
      {% for mxchange in hosted_mxchanges %}
      <li><a href="/mxchange/{{ mxchange.id }}">With: {{ mxchange.start_guest.username }} - Started: {{ mxchange.start_date }}<a></li>
      {% endfor %}
    </ul>
  </body>
</html>
#+END_SRC

*** Update routes.py:

mxchange/routes.py
#+BEGIN_SRC python
from . import app, db, cas
from flask import render_template, redirect
from flask_cas import login_required
from .forms import StartMealExchangeForm
from .models import User, MealExchange


@app.route("/")
@login_required
def main():
    me = User.query.filter_by(username=cas.username).first()
    hosted_mxchanges = MealExchange.query.filter_by(
        start_host=me).all()
    guested_mxchanges = MealExchange.query.filter_by(start_guest=me)
    return render_template('index.html',
                           hosted_mxchanges=hosted_mxchanges,
                           guested_mxchanges=guested_mxchanges)


@app.route('/start', methods=('GET', 'POST'))
@login_required
def start():
    form = StartMealExchangeForm()
    if form.validate_on_submit():
        guest = User.query.filter_by(username=form.guest.data).first()
        host = User.query.filter_by(username=cas.username).first()
        # We will want to actually do something here later
        if guest is not None and host is not None:
            mxchange = MealExchange(
                start_date=form.date.data, start_host=host,
                start_guest=guest, meal=form.meal.data)
            db.session.add(mxchange)
            db.session.commit()
            return redirect('/')
    return render_template('start.html', form=form)
#+END_SRC
* Conclusion:
** What we've done
- You should have:
  - app.py
  - mxchange/
    - forms.py
    - routes.py
    - models.py
    - __init__.py
    - templates/
      - start.html
      - index.html
- Congratulations!
** Next steps?
- Create a way to show meal exchanges
- Create a way to complete meal exchanges
- Verify certain properties about meal exchanges
- Showing clubs
  - Maybe even do some complicated meal exchange matching algorithms?
    :)
- Importantly, you should now know how to begin working on any of these!
